#+TITLE: Doom Config

#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":/opt/texlive/2022/bin/x86_64-linux/"))
#+END_SRC

* General Helpers

#+BEGIN_SRC emacs-lisp
(defun ph/call-rotate (fn lst)
  "Call FN with first element of the LST.
Returns the rotated list."
  (let ((args (car lst)))
    (funcall fn args)
    (append (cdr lst) (cons args ()))))
#+END_SRC

* Tweaking Emacs Defaults

This section contains customizations of Emacs' default settings.

** Scroll

When scrolling, keep the cursor at the same position.

#+BEGIN_SRC emacs-lisp
(setq scroll-preserve-screen-position 'keep)
#+END_SRC

** Auto revert

When something changes a file, automatically refresh the buffer containing that
file so they can't get out of sync.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

Update vc-info when reverting (e.g. after changing branch). Note that this may
cause performance issues when many buffers are present.

#+BEGIN_SRC emacs-lisp
(setq auto-revert-check-vc-info t)
#+END_SRC

** Line Unfilling

To undo paragraph and region reorganization. Stolen from [[https://www.emacswiki.org/emacs/UnfillParagraph][here]].

#+BEGIN_SRC emacs-lisp
(defun ph/unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line
of text."
  (interactive (progn (barf-if-buffer-read-only) '(t)))
  (let ((fill-column (point-max))
        ;; This would override `fill-column' if it's an integer.
        (emacs-lisp-docstring-fill-column t))
    (fill-paragraph nil region)))
#+END_SRC

** Indentation

Tabs for indentation, spaces for alignment.

#+BEGIN_SRC emacs-lisp

;; (setq tab-width 4)        ;; set your desired tab width
(setq indent-tabs-mode t)
(setq evil-indent-convert-tabs nil)

;; FIXME: check is this is annoying?
;(smart-tabs-insinuate 'c 'c++ 'java 'javascript 'python)
#+END_SRC

** Whitespace Cleanup

Delete trailing whitespaces when saving.

#+BEGIN_SRC emacs-lisp
; (add-hook 'write-file-hooks 'delete-trailing-whitespace)
(remove-hook 'write-file-hooks 'delete-trailing-whitespace)
#+END_SRC

# TODO: this doesn't seem to work everywhere :/

** Buffers and Frames

Split functions which open the previous buffer in the new window instead of
showing the current buffer twice. [[http://www.alandmoore.com/blog/2013/05/01/better-window-splitting-in-emacs/][Stolen shamelessly from here]]

#+BEGIN_SRC emacs-lisp
(defun ph/vsplit-last-buffer ()
  (interactive)
  (split-window-vertically)
  (other-window 1 nil)
  (switch-to-next-buffer))

(defun ph/hsplit-last-buffer ()
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil)
  (switch-to-next-buffer))
#+END_SRC

A function to open the previous buffer in a new frame.

#+BEGIN_SRC emacs-lisp
(defun ph/open-last-buffer ()
  (interactive)
  (switch-to-buffer-other-frame (other-buffer)))
#+END_SRC
** Kill Buffers

Kill all but the current buffer. [[https://www.emacswiki.org/emacs/KillingBuffers][Stolen shamelessly from here]].

#+BEGIN_SRC emacs-lisp
(defun ph/kill-other-buffers ()
  "Kill all other buffers."
  (interactive)
  (mapc 'kill-buffer (delq (current-buffer) (buffer-list))))
#+END_SRC

** Garbage

For some reason

#+BEGIN_SRC emacs-lisp
;; (setq gc-cons-threshold (* 20 1000 1000))
#+END_SRC

# TODO: is the gc an issue in doom emacs?

** Password Cache

# TODO: this doesn't work, at least not for tramp

#+BEGIN_SRC emacs-lisp
(setq-default password-cache nil)
#+END_SRC

* Doom Module configuration
** Org Mode

#+BEGIN_SRC emacs-lisp
(after! org
  ;; don't indent code blocks
  (setq org-edit-src-content-indentation 0)
  ;; don’t ask for permission every time when executing a code block.
  (setq org-confirm-babel-evaluate nil)
  ;; don't indent first line after heading
  (setq org-adapt-indentation nil)
  ;; enable toc-org
  (add-hook 'org-mode-hook 'toc-org-enable))
#+END_SRC

** Which-key

#+BEGIN_SRC emacs-lisp
(after! which-key
  ;; (setq which-key-show-operator-state-maps t)
  ;; why this has no effect?
  (setq which-key-idle-delay 0.4))
#+END_SRC


** Web

#+BEGIN_SRC emacs-lisp
;(after! web-mode
  (add-to-list 'auto-mode-alist '("\\.tag\\'" . web-mode))
  (setq web-mode-engines-alist
        '(("riot" . "\\.tag\\'")))
;;)
#+END_SRC

#+RESULTS:
: ((riot . \.tag\'))

** LSP

#+BEGIN_SRC emacs-lisp
(after! lsp-ui
  (setq lsp-ui-doc-enable t))
#+END_SRC

** TeX

# TODO: cargo uses 100% cpu, why?
# $ cargo install --git https://github.com/latex-lsp/texlab.git

install a lsp server
$ luarocks install digestif

I want to scroll. I use evince.

#+BEGIN_SRC emacs-lisp
(setq +latex-viewers '(evince))

(after! tex
  (setq TeX-fold-mode nil))
#+END_SRC

[[https://procrastiblog.com/2007/11/25/style-guidelines-for-people/][Stolen shamelessly from here.]]

#+BEGIN_SRC emacs-lisp
;; (defun ph/TeX-fill-sentence ()
;;   (interactive)
;;   (save-excursion
;;     (or (eq (point) (point-max)) (forward-char))
;;     (forward-sentence -1)
;;     (indent-relative t)
;;     (let ((beg (point))
;;           (ix (string-match "LaTeX" mode-name)))
;;       (forward-sentence)
;;       (if (and ix (equal "LaTeX" (substring mode-name ix)))
;;           (LaTeX-fill-region-as-paragraph beg (point))
;;         (fill-region-as-paragraph beg (point))))))

;; (map!
;;  :after tex
;;  :map TeX-mode-map
;;  "M-q" 'ph/TeX-fill-sentence)


;; Another "solution"
;; (defadvice LaTeX-fill-region-as-paragraph (around LaTeX-sentence-filling)
;;   "Start each sentence on a new line."
;;   (let ((from (ad-get-arg 0))
;;         (to-marker (set-marker (make-marker) (ad-get-arg 1)))
;;         tmp-end)
;;     (while (< from (marker-position to-marker))
;;       (forward-sentence)
;;       ;; might have gone beyond to-marker --- use whichever is smaller:
;;       (ad-set-arg 1 (setq tmp-end (min (point) (marker-position to-marker))))
;;       ad-do-it
;;       (ad-set-arg 0 (setq from (point)))
;;       (unless (or
;;                (bolp)
;;                (looking-at "\\s *$"))
;;         (LaTeX-newline)))
;;     (set-marker to-marker nil)))

;; (ad-activate 'LaTeX-fill-region-as-paragraph)
#+END_SRC

#+RESULTS:
: LaTeX-fill-region-as-paragraph

** Flycheck

#+BEGIN_SRC emacs-lisp
(after! flycheck
  (setq flycheck-popup-tip-mode nil))
#+END_SRC

** Mu4e
*** General

#+BEGIN_SRC emacs-lisp
(after! mu4e
  ;; no fancy for me
  (setq mu4e-use-fancy-chars nil)
  ;; use offlineimap
  (setq mu4e-get-mail-command "offlineimap")
  ;; don't show images inline
  (setq mu4e-view-show-images nil)
  ;; Set attachment directory
  (setq mu4e-attachment-dir  "~/Downloads")
  ;; Close mu4e without asking
  (setq mu4e-confirm-quit nil)
  ;; Don't show my addresses in mu4e-main
  (setq mu4e-main-buffer-hide-personal-addresses t)
  ;; hide indexing messages
  (setq mu4e-hide-index-messages t)
  ;; update every 10 minutes
  (setq mu4e-update-interval (* 10 60))

  ;; TODO: check why I need this on my new install to sign messages
  ;; https://svn.red-bean.com/repos/kfogel/trunk/.emacs
  (setq mml-secure-openpgp-sign-with-sender t)

  (setq shr-color-visible-luminance-min 60)
  (setq shr-color-visible-distance-min 5)
  (setq shr-use-colors nil))
  ;;(advice-add #'shr-colorize-region :around (defun shr-no-colourise-region (&rest ignore))))

  ;; FIXME: why is this required? (mu4e~headers-buffer-name exists)
  (setq mu4e-headers-buffer-name "*mu4e-headers*")
#+END_SRC


Open mu4e in the current frame or switch to an already existing mu4e-buffer.

#+BEGIN_SRC emacs-lisp
;; (defun ph/mu4e (fn &rest args)
;;   "Open or switch to mu4e."
;;   (interactive)
;;   (unless (string-prefix-p "mu4e" (symbol-name major-mode))
;;     (let ((buffer (get-buffer "*mu4e-headers*")))
;;       (if buffer (switch-to-buffer buffer) (call-interactively fn args)))))

;; (advice-add 'mu4e :around 'ph/mu4e)
;; (advice-add '=mu4e :around 'ph/mu4e)
#+END_SRC

*** Bookmarks

Custom Bookmarks

#+BEGIN_SRC emacs-lisp
(after! mu4e
  (add-to-list 'mu4e-bookmarks
               '(:name  "Big ones"
                 :query "size:5M..50000M"
                 :key ?b))
  (add-to-list 'mu4e-bookmarks
               '(:name  "Bullshit"
                 :query "maildir:/.*/.*\\(spam\\|junk\\).*/"
                 :key ?s)))
#+END_SRC

*** Forgotten Attachment

Before sending a message, check if it contains any words that indicate that
there should be an attachement. If it does, ask if all attachments were added
before sending the mail.

#+BEGIN_SRC emacs-lisp
(defvar ph/message-attachment-regexp
  (concat "\\("
          "[Ww]e send\\|"
          "[Ii] send\\|"
          "attach\\|"
          "[aA]nhang\\|"
          "[aA]ngehängt\\|"
          "[sS]chicke\\|"
          "haenge\\|"
          "hänge\\)"))

(defun ph/message-check-attachment nil
  "Check for forgotten attachments"
  (save-excursion
    (message-goto-body)
    (when (search-forward-regexp ph/message-attachment-regexp nil t nil)
      (message-goto-body)
      (unless (message-y-or-n-p
               "Did you attach all documents?" nil nil)
        (error "No message sent, add some attachments!")))))

(add-hook 'message-send-hook 'ph/message-check-attachment)
#+END_SRC

*** Contexts

#+BEGIN_SRC emacs-lisp
(after! mu4e
  (setq mu4e-contexts
      `(,(make-mu4e-context
          :name "Private"
          :match-func (lambda (msg)
                        (when msg
                          (or
                           (mu4e-message-contact-field-matches
                            msg
                            :to "pascal.huber@resolved.ch")
                           (mu4e-message-contact-field-matches
                            msg
                            :to "accounts@resolved.ch"))))
          :vars '((user-full-name                . "Pascal Huber" )
                  (user-mail-address             . "pascal.huber@resolved.ch")
                  (mu4e-get-mail-command         . "offlineimap")
                  (mu4e-drafts-folder            . "/r/Drafts")
                  (mu4e-sent-folder              . "/r/Sent")
                  (mu4e-trash-folder             . "/r/Trash")
                  (mu4e-maildir-shortcuts
                   .( ("/r/INBOX"                . ?i)
                      ("/r/Sent"                 . ?s)
                      ("/r/Spam"                 . ?x)
                      ("/r/keep"                 . ?k)
                      ("/r/tempKeep"             . ?t)
                      ("/r/Trash"                . ?b)))
                  (mu4e-compose-crypto-reply-plain-policy . sign)
                  (ph/mu4e-default-search-expr   . "maildir:/r/.*[^Trash]/")
                  (mu4e-sent-messages-behavior   . sent)
                  (smtpmail-stream-type          . starttls)
                  (smtpmail-default-smtp-server  . "mail.infomaniak.com")
                  (smtpmail-smtp-server          . "mail.infomaniak.com")
                  (smtpmail-smtp-service         . 587)
                  (smtpmail-smtp-user            . "pascal.huber@resolved.ch")
                  (smtpmail-starttls-credentials . "/home/pascal/.authinfo.gpg")))
        ,(make-mu4e-context
          :name "QuickShift"
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches
                           msg
                           :to "pascal@quickshift.ch")))
          :vars '((user-full-name                . "Pascal Huber" )
                  (user-mail-address             . "pascal@quickshift.ch")
                  (mu4e-get-mail-command         . "offlineimap")
                  (mu4e-drafts-folder            . "/q/INBOX.Drafts")
                  (mu4e-sent-folder              . "/q/INBOX.Sent")
                  (mu4e-trash-folder             . "/q/INBOX.Trash")
                  (mu4e-maildir-shortcuts
                   .( ("/q/INBOX"                . ?i)
                      ("/q/INBOX.Sent"           . ?s)
                      ("/q/INBOX.spambucket"     . ?x)
                      ("/q/INBOX.keep"           . ?k)
                      ("/q/INBOX.live"           . ?l)
                      ("/q/INBOX.customers"      . ?c)
                      ("/q/INBOX.tempKeep"       . ?k)
                      ("/q/INBOX.bugsnag"        . ?e)
                      ("/q/INBOX.Trash"          . ?b)))
                  (mu4e-compose-crypto-reply-plain-policy . sign)
                  (ph/mu4e-default-search-expr   . "maildir:/q/.*[^Trash]/")
                  (mu4e-sent-messages-behavior   . sent)
                  (smtpmail-stream-type          . starttls)
                  (smtpmail-default-smtp-server  . "mail.your-server.de")
                  (smtpmail-smtp-server          . "mail.your-server.de")
                  (smtpmail-smtp-service         . 587)
                  (smtpmail-smtp-user            . "pascal@quickshift.ch")
                  (smtpmail-starttls-credentials . "/home/pascal/.authinfo.gpg")
                  (smtpmail-auth-credentials     . '(("mail.your-server.de" 587 nil nil)))))
        ,(make-mu4e-context
          :name "ETH"
          :match-func (lambda (msg)
                        (when msg
                          (mu4e-message-contact-field-matches
                           msg
                           :to "pahuber@student.ethz.ch")))
          :vars '((user-full-name                . "Pascal Huber" )
                  (user-mail-address             . "pahuber@student.ethz.ch")
                  (mu4e-get-mail-command         . "offlineimap")
                  (mu4e-drafts-folder            . "/e/Drafts")
                  (mu4e-sent-folder              . "/e/Sent Items")
                  (mu4e-trash-folder             . "/e/Deleted Items")
                  (mu4e-maildir-shortcuts
                   .( ("/e/INBOX"                . ?i)
                      ("/e/Junk E-Mail"          . ?x)
                      ("/e/INBOX.keep"           . ?k)
                      ("/e/INBOX.algolab"        . ?a)
                      ("/e/INBOX.pai"            . ?p)
                      ("/e/INBOX.dphpc"          . ?d)
                      ("/e/INBOX.failure"        . ?f)
                      ("/e/INBOX.syssec"         . ?l)
                      ("/e/Sent Items"           . ?s)
                      ("/e/INBOX.tmp"            . ?t)
                      ("/e/Deleted Items"        . ?b)))
                  (mu4e-compose-crypto-reply-plain-policy . sign)
                  (ph/mu4e-default-search-expr   . "maildir:/e/.*[^Deleted\\ Items]/")
                  (mu4e-sent-messages-behavior   . sent)
                  (smtpmail-stream-type          . starttls)
                  (smtpmail-default-smtp-server  . "mail.ethz.ch")
                  (smtpmail-smtp-server          . "mail.ethz.ch")
                  (smtpmail-smtp-service         . 587)
                  (smtpmail-smtp-user            . "pahuber")
                  (smtpmail-starttls-credentials . "/home/pascal/.authinfo.gpg")
                  (smtpmail-auth-credentials     . '(("mail.ethz.ch" 587 nil nil))))))))


;; (set-email-account! "Lissner.net"
;;   '((mu4e-sent-folder       . "/Lissner.net/Sent Mail")
;;     (mu4e-drafts-folder     . "/Lissner.net/Drafts")
;;     (mu4e-trash-folder      . "/Lissner.net/Trash")
;;     (mu4e-refile-folder     . "/Lissner.net/All Mail")
;;     (smtpmail-smtp-user     . "henrik@lissner.net")
;;     (mu4e-compose-signature . "---\nHenrik Lissner"))
;;   t)
#+END_SRC

* Key Bindings
** Doom

Don't do anything on =SPC-x= for muscle-memory's sake.

#TODO: remove this when I feel comfortable enough with Doom's keybindings

#+BEGIN_SRC emacs-lisp
(map! :leader "x" nil)
#+END_SRC

This is redundant (=leader w h=) and conflicts with the which-key help.

#+BEGIN_SRC emacs-lisp
(map! :leader "w C-h" nil)
#+END_SRC

** God Mode

My beloved =god-mode=. Because doom already has SPC covered, I use comma
instead.

#+BEGIN_SRC emacs-lisp
(map! :n "," 'god-execute-with-current-bindings)
(map! :v "," 'god-execute-with-current-bindings)
#+END_SRC

Also enable which-key for =god-mode=

#+BEGIN_SRC emacs-lisp
(after! which-key
  (which-key-enable-god-mode-support))
#+END_SRC

** Custom keybindings

My global keybindings are defined here. In order to get a better overview, they
are neatly packed inside a minor-mode with its own keymap.

#+BEGIN_SRC emacs-lisp
(defvar ph/global-keys-keymap (make-sparse-keymap))

(define-minor-mode ph/global-keys-mode
  "A minor mode with personalized keybindings."
  :init-value t
  :lighter nil
  ph/global-keys-keymap)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(map!
 :map ph/global-keys-keymap
 "C-c l u" 'ph/unfill-paragraph
 "C-x C-b" 'ivy-switch-buffer
 "<f5>"  'ph/next-theme)
#+END_SRC

** Org

#+BEGIN_SRC emacs-lisp
;; (after! org (setq org-superstar-headline-bullets-list '("*")) ) #+END_SRC
#+END_SRC

* UI
** Default Font

Set default font

#+BEGIN_SRC emacs-lisp
;; ;; Why not like this?
;; (set-face-attribute 'default nil
;;                     :height 120
;;                     :family "Iosevka Nerd Font Mono")

(setq doom-font-increment 1)
(setq doom-font (font-spec
                 :family "Iosevka Slab"
                 ; :family "DejaVu Sans Mono"
                 :size 22
                 :weight 'normal)
      ;; inherits `doom-font''s :size
      doom-variable-pitch-font (font-spec :family "Iosevka Slab")
      doom-unicode-font (font-spec :family "Iosevka Slab" :size 22)
      doom-big-font (font-spec :family "Iosevka Slab" :size 24))
#+END_SRC

#+RESULTS:
: #<font-spec nil nil Iosevka\ Slab nil nil nil nil nil 24 nil nil nil nil>

Change font on the fly.

#+BEGIN_SRC emacs-lisp
(setq ph/font-list
      '("Iosevka Slab"))

(defun ph/doom-set-font (font)
  (message (concat "setting font to " font))
  (setq doom-font (font-spec :family font))
  (doom/reload-font))

(defun ph/doom-next-font ()
  "Load next theme."
  (interactive)
  (setq ph/font-list
        (ph/call-rotate 'ph/doom-set-font ph/font-list)))
#+END_SRC

#+RESULTS:
: ph/doom-next-font

** Modeline

#+BEGIN_SRC emacs-lisp
(after! doom-modeline
  (setq doom-modeline-icon nil)
  (setq doom-modeline-percent-position nil)
  (setq doom-modeline-height 24)
  (setq doom-modeline-checker-simple-format nil)
  (setq doom-modeline-minor-modes nil)
  (setq doom-modeline-vcs-max-length 24)
  (setq doom-modeline-buffer-file-name-style 'buffer-name)
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
(after! doom-modeline
(doom-modeline-def-segment ph/projectile-project-name
  (when (projectile-project-p)
    (concat
     (doom-modeline-spc)
     (propertize (projectile-project-name) 'face
                 (if (doom-modeline--active)
                     'doom-modeline-buffer-path
                   'mode-line-inactive))
     (doom-modeline-spc))))
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp
(after! doom-modeline
(setq doom-modeline-evil-state-faces-alist
      '((normal . doom-modeline-evil-normal-state)
        (emacs . doom-modeline-evil-emacs-state)
        (insert . doom-modeline-evil-insert-state)
        (motion . doom-modeline-evil-motion-state)
        (visual . doom-modeline-evil-visual-state)
        (operator . doom-modeline-evil-operator-state)
        (replace . doom-modeline-evil-replace-state)))

(doom-modeline-def-segment ph/evil-state
  "The current evil state. Requires `evil-mode' to be enabled."
  (when (bound-and-true-p evil-local-mode)
    (let ((tag (evil-state-property evil-state :tag t)))
      (propertize (if (stringp tag) tag (funcall tag)) 'face
                  (if (doom-modeline--active)
                      (cdr (assoc evil-state
                                  doom-modeline-evil-state-faces-alist))
                    'doom-modeline-bar-inactive)))))

(set-face-attribute 'doom-modeline-evil-emacs-state nil
                    :foreground "#111"
                    :background "#83a598")
(set-face-attribute 'doom-modeline-evil-insert-state nil
                    :foreground "#111"
                    :background "#b8bb26")
(set-face-attribute 'doom-modeline-evil-motion-state nil
                    :foreground "#111"
                    :background "#8ec07c")
(set-face-attribute 'doom-modeline-evil-normal-state nil
                    :foreground "#111"
                    :background "#fabd2f")
(set-face-attribute 'doom-modeline-evil-operator-state nil
                    :foreground "#111"
                    :background "#d5c4a1")
(set-face-attribute 'doom-modeline-evil-visual-state nil
                    :foreground "#111"
                    :background "#ebdbb2")
(set-face-attribute 'doom-modeline-evil-replace-state nil
                    :foreground "#111"
                    :background "#fb4934")
)
#+END_SRC

Setup modeline with my segments.

#+BEGIN_SRC emacs-lisp
(after! doom-modeline
  (doom-modeline-def-modeline 'main
  '(bar
    workspace-name
    window-number
    ph/evil-state
    ;; matches
    buffer-info
    remote-host
    buffer-position
    parrot
    selection-info
    ;tramp-method
    ;ph/buffer-info
    ;ph/flyspell-dictionary
    checker)
  '(minor-modes
    media-info
    misc-info
    vcs
    ph/projectile-project-name
    major-mode))

  ;; workaround for scaling problem
  (add-hook 'buffer-list-update-hook 'doom-modeline-refresh-font-width-cache))
#+END_SRC

#+RESULTS:
| doom-modeline-refresh-font-width-cache | flycheck-handle-buffer-switch | doom-run-switch-window-hooks-h | doom-modeline-window-size-change-function | doom-modeline-set-selected-window |

** Themes

#+BEGIN_SRC emacs-lisp
(setq ph/theme-list
      '(doom-gruvbox
        doom-gruvbox-light))

(defun ph/next-theme ()
  "Load next theme."
  (interactive)
  (setq ph/theme-list
        (ph/call-rotate 'ph/load-theme ph/theme-list)))

;; TODO: is there a better way to call a function after startup such that it
;; still looks good with org-superstar-mode?
;; (add-hook 'after-init-hook 'ph/next-theme)
;; (after! org (ph/next-theme))
;; (add-hook 'doom-init-theme-hook 'ph/next-theme)
(add-hook 'emacs-startup-hook 'ph/next-theme)
#+END_SRC

Functions to load and customize themes.

#+BEGIN_SRC emacs-lisp
  (defun ph/load-theme (theme)
   "Like load-theme but first disable all custom-enabled themes ,
  then load THEME and finally do some customizations."
    (interactive
     (list
      (intern (completing-read
               "Load custom theme: "
               (mapcar 'symbol-name (custom-available-themes))))))
    (mapcar 'disable-theme custom-enabled-themes)
    (load-theme theme t)
    (ph/customize-theme theme)
    (ph/any-theme-customize))

  (defun ph/customize-theme (theme)
    "Call ph/THEME-customize if existent."
    (let ((fn (intern (concat "ph/" (symbol-name theme) "-customize"))))
      (message (concat "ph/" (symbol-name theme) "-customize"))
      (if (functionp fn)
          (funcall fn))))

  (defun ph/doom-peacock-customize ()
    ;; highlight current line number
    (set-face-attribute 'line-number-current-line nil
                        :foreground "#BCD42A"
                        :weight 'bold))

  (defun ph/any-theme-customize ()
    "This function sets some default values for all themes."

    ;; Never ever scale org and markdown headings
    ;; (set-face-attribute 'org-level-1 nil
    ;;                     :height 1.0 :background nil)
    ;; (set-face-attribute 'org-level-2 nil
    ;;                     :height 1.0 :background nil)
    ;; (set-face-attribute 'org-level-3 nil
    ;;                     :height 1.0 :background nil)
    ;; (set-face-attribute 'org-level-4 nil
    ;;                     :height 1.0 :background nil)
    ;; (set-face-attribute 'org-level-5 nil
    ;;                     :height 1.0 :background nil)
    ;; (set-face-attribute 'org-level-6 nil
    ;;                     :height 1.0 :background nil)
    ;; (set-face-attribute 'org-level-7 nil
    ;;                     :height 1.0 :background nil)
    ;; (set-face-attribute 'org-level-8 nil
    ;;                     :height 1.0 :background nil)

    (set-face-attribute 'doom-modeline-bar nil
                        :foreground nil
                        :background nil)

    ;; Use a smaller font for the mode-line
    (set-face-attribute 'mode-line nil
                        :height 100)
    (set-face-attribute 'mode-line-inactive nil
                        :height 100)
  )
#+END_SRC
